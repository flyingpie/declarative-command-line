using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace DeclarativeCommandLine.Generator;

// TODO: Partial CommandBuilder, with separate methods per command, for easier extension
[Generator]
public class CommandBuilderGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		Counter.Reset();

		// Find classes with at least 1 attribute.
		var candidates = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: static (s, _) => s is TypeDeclarationSyntax tds && tds.AttributeLists.Count > 0,
				transform: static (ctx, _) => (TypeDeclarationSyntax)ctx.Node)
			.Where(static t => t is not null);

		var combined = context.CompilationProvider.Combine(candidates.Collect());

		// Build model and generate code.
		context.RegisterSourceOutput(combined, static (spc, source) =>
		{
			var (compilation, typeDecls) = source;

			var ctx = new DeclContext(compilation);

			try
			{
				var cmds = typeDecls
					.Select(decl => CommandView.TryParse(ctx, decl, out var view) ? view : null)
					.Where(c => c != null)
					.Select(c => c!)
					.ToList();

				var rootCmds = cmds.Where(c => c.CmdParent == null).ToList();
				if (rootCmds.Count == 0)
				{
#pragma warning disable S125 // MvdO: Enable when we can properly configure and suppress things.
#pragma warning disable SA1027 // MvdO: Enable when we can properly configure and suppress things.
					// spc.ReportDiagnostic(
					// 	Diagnostic.Create(
					// 		id: "DECLI0011",
					// 		category: "Compiler",
					// 		message: "No root commands found. Make sure exactly 1 command class exists, decorated with the [Command] attribute, without a parent.",
					// 		severity: DiagnosticSeverity.Warning,
					// 		defaultSeverity: DiagnosticSeverity.Warning,
					// 		isEnabledByDefault: true,
					// 		warningLevel: 1));
#pragma warning restore SA1027
#pragma warning restore S125

					return;
				}

				if (rootCmds.Count > 1)
				{
					spc.ReportDiagnostic(
						Diagnostic.Create(
							id: "DECLI0012",
							category: "Compiler",
							message: $"More than 1 root command found. Make sure exactly 1 command class exists, decorated with the [Command] attribute, without a parent. These were found: {string.Join(", ", rootCmds.Select(cmd => cmd.FullName))}",
							severity: DiagnosticSeverity.Warning,
							defaultSeverity: DiagnosticSeverity.Warning,
							isEnabledByDefault: true,
							warningLevel: 1));

					return;
				}

				var rootCmd = rootCmds[0];

				var sb = new StringBuilder();

				sb.AppendLine("// <auto-generated/>");
				sb.AppendLine("#pragma warning disable");
				sb.AppendLine();
				sb.AppendLine("using DeclarativeCommandLine;");
				sb.AppendLine("using System;");
				sb.AppendLine("using System.CommandLine;");
				sb.AppendLine();
				sb.AppendLine($"namespace {rootCmd.Symbol.ContainingNamespace}");
				sb.AppendLine("{");
				sb.AppendLine("    public partial class CommandBuilder");
				sb.AppendLine("    {");
				sb.AppendLine("        public virtual RootCommand Build(Func<Type, object> serviceProvider)");
				sb.AppendLine("        {");

				WriteCommand(sb, cmds, rootCmd, null, 12);

				sb.AppendLine($"            return cmd{rootCmd.Index};");
				sb.AppendLine("        }");
				sb.AppendLine("    }");
				sb.AppendLine("}");

				spc.AddSource("CommandBuilder.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
			}
			catch (Exception ex)
			{
				spc.ReportDiagnostic(
					Diagnostic.Create(
						id: "DECLI0001",
						category: "Compiler",
						message: $"Something went wrong while running the DeclarativeCommandLine source generator: {ex} {ex.StackTrace}",
						severity: DiagnosticSeverity.Error,
						defaultSeverity: DiagnosticSeverity.Error,
						isEnabledByDefault: true,
						warningLevel: 0));
			}
		});
	}

	private static void WriteCommand(StringBuilder sb, List<CommandView> cmds, CommandView cmd, CommandView? parent, int indent)
	{
		var tab = new string(' ', indent);
		var cmdVar = $"cmd{cmd.Index}";

		if (parent == null)
		{
			// Root command
			sb.AppendLine($"{tab}var {cmdVar} = new RootCommand();");
		}
		else
		{
			// Child command
			sb.AppendLine($"{tab}var {cmdVar} = new Command(\"{cmd.CmdName}\");");
			sb.AppendLine($"{tab}cmd{parent.Index}.Add({cmdVar});");
		}

		foreach (var alias in cmd.CmdAliases)
		{
			sb.AppendLine($"{tab}{cmdVar}.Aliases.Add(\"{alias}\");");
		}

		sb.AppendLine($"{tab}{cmdVar}.Hidden = {cmd.CmdHidden.ToCSharpBoolString()};");

		foreach (var opt in cmd.Properties)
		{
			var optVar = $"opt{opt.Index}";

			if (opt.ArgumentAttribute != null)
			{
				sb.AppendLine($"{tab}// Argument {opt.OptName}");
				sb.AppendLine($"{tab}var {optVar} = new Argument<{opt.PropertyTypeNameWithNullable}>(\"{opt.OptName}\");");
				sb.AppendLine($"{tab}{{");
				sb.AppendLine($"{tab}    {cmdVar}.Add({optVar});");
				sb.AppendLine($"{tab}    {optVar}.Description = \"{opt.OptDescription}\";");
				sb.AppendLine($"{tab}}}");
			}

			if (opt.OptionAttribute != null)
			{
				sb.AppendLine($"{tab}// Option {opt.OptName}");
				sb.AppendLine($"{tab}var {optVar} = new Option<{opt.PropertyTypeNameWithNullable}>(\"{opt.OptName}\");");
				sb.AppendLine($"{tab}{{");
				sb.AppendLine($"{tab}    {cmdVar}.Add({optVar});");
				sb.AppendLine($"{tab}    {optVar}.Description = \"{opt.OptDescription}\";");
				sb.AppendLine($"{tab}    {optVar}.Hidden = {opt.OptHidden.ToCSharpBoolString()};");
				sb.AppendLine($"{tab}    {optVar}.Required = {opt.OptRequired.ToCSharpBoolString()};");
				sb.AppendLine($"{tab}}}");
			}
		}

		if (cmd.IsExecutable)
		{
			sb.AppendLine(
				$$"""
				{{tab}}{{cmdVar}}.SetAction(async (parseResult, ct) =>
				{{tab}}{
				{{tab}}    var {{cmdVar}}Inst = ({{cmd.FullName}})serviceProvider(typeof({{cmd.FullName}}));
				""");

			foreach (var opt in cmd.Properties)
			{
				var optVar = $"opt{opt.Index}";
				sb.AppendLine($"{tab}    {cmdVar}Inst.{opt.PropertyName} = parseResult.GetValue({optVar});");
			}

			sb.AppendLine();

			sb.AppendLine(
				$$"""
				{{tab}}    if ({{cmdVar}}Inst is IAsyncCommandWithParseResult {{cmdVar}}001)
				{{tab}}    {
				{{tab}}        await {{cmdVar}}001.ExecuteAsync(parseResult, ct).ConfigureAwait(false);
				{{tab}}    }
				{{tab}}
				{{tab}}    if ({{cmdVar}}Inst is IAsyncCommand {{cmdVar}}002)
				{{tab}}    {
				{{tab}}        await {{cmdVar}}002.ExecuteAsync(ct).ConfigureAwait(false);
				{{tab}}    }
				{{tab}}
				{{tab}}    if ({{cmdVar}}Inst is ICommand {{cmdVar}}003)
				{{tab}}    {
				{{tab}}        {{cmdVar}}003.Execute();
				{{tab}}    }
				{{tab}}});

				""");
		}

		var children = cmds.Where(c => c.CmdParent?.EqualsNamedSymbol(cmd.Symbol) ?? false).ToList();
		if (children.Count > 0)
		{
			foreach (var cCmd in children.OrderBy(c => c.Name))
			{
				sb.AppendLine($"{tab}// {cCmd.FullName}");
				sb.AppendLine($"{tab}{{");
				WriteCommand(sb, cmds, cCmd, cmd, indent + 4);
				sb.AppendLine($"{tab}}}");
			}
		}
	}
}