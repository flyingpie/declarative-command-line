using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DeclarativeCommandLine.Generator;

[Generator]
public class MyGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		// Step A: filter for type declarations with attributes
		var candidates = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: static (s, _) => s is TypeDeclarationSyntax tds && tds.AttributeLists.Count > 0,
				transform: static (ctx, _) => (TypeDeclarationSyntax)ctx.Node)
			.Where(static t => t is not null);

		// Step B: hand candidates + Compilation to a pipeline step
		var combined = context.CompilationProvider.Combine(candidates.Collect());

		// Step C: generate source
		context.RegisterSourceOutput(combined, static (spc, source) =>
		{
			var (compilation, typeDecls) = source;

			var ctx = new DeclContext(compilation);

			var sb = new StringBuilder();

			sb.AppendLine("/// <auto-generated/>");
			sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
			sb.AppendLine("using System;");
			sb.AppendLine("using System.CommandLine;");
			sb.AppendLine("");
			sb.AppendLine("namespace DeclarativeCommandLine.Generated");
			sb.AppendLine("{");
			sb.AppendLine("    public class CommandFactory");
			sb.AppendLine("    {");
			sb.AppendLine("        public RootCommand Parse(IServiceProvider serviceProvider, string[] args)");
			sb.AppendLine("        {");

			var cmds = typeDecls
				.Select(decl => CommandView.TryParse(ctx, decl, out var view) ? view : null)
				.Where(c => c != null)
				.Select(c => c!)
				.ToList();

			var rootCmds = cmds.Where(c => c.CmdParent == null).ToList();
			if (rootCmds.Count == 0)
			{
				// Diagnostic.Create(); // TODO
			}

			if (rootCmds.Count > 1)
			{
				// Diagnostic.Create(); // TODO
			}

			var rootCmd = rootCmds.FirstOrDefault();

			var cmdIdx = 0;

			WriteCommand(sb, cmds, rootCmd, null, 12);

			// sb.AppendLine($"            // {rootCmd.FullName}");
			// sb.AppendLine($"            var parentCmd = new RootCommand();");
			//
			//
			// foreach (var cmd in cmds.Where(c => c.CmdParent?.EqualsNamedSymbol(rootCmd.Symbol) ?? false))
			// {
			// 	sb.AppendLine($"            // {cmd.FullName}");
			// 	sb.AppendLine($"            var cmd = new Command(\"the-cmd\");");
			// 	sb.AppendLine($"            {{");
			// 	sb.AppendLine($"                parentCmd.Add(cmd);");
			// 	sb.AppendLine($"            }}");
			// 	sb.AppendLine();
			// }
			//
			// sb.AppendLine();

			var dbg = 2;

			sb.AppendLine("            return null;");
			sb.AppendLine("        }");
			sb.AppendLine("    }");
			sb.AppendLine("}");

			spc.AddSource("CommandFactory.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
		});
	}

	private static void WriteCommand(StringBuilder sb, List<CommandView> cmds, CommandView cmd, CommandView? parent, int indent)
	{
		var tab = new string(' ', indent);

		var hasParent = cmd.CmdParent != null;
		var cmdVar = $"cmd{cmd.Index}";

		sb.AppendLine($"{tab}// {cmd.FullName}");
		if (parent == null)
		{
			// Root command
			sb.AppendLine($"{tab}var {cmdVar} = new RootCommand();");
		}
		else
		{
			// Child command
			sb.AppendLine($"{tab}var {cmdVar} = new Command(\"{cmd.CmdName}\");");
			sb.AppendLine($"{tab}{cmdVar}.Add(cmd{parent.Index});");
			sb.AppendLine(
				$$"""
				{{tab}}{{cmdVar}}.SetAction(async (parseResult, ct) =>
				{{tab}}{
				{{tab}}    Console.WriteLine("Hello Math.Add!");
				{{tab}}
				{{tab}}    var {{cmdVar}}Inst = serviceProvider.GetRequiredService<{{cmd.FullName}}>();
				{{tab}}
				{{tab}}    if ({{cmdVar}}Inst is IAsyncCommandWithParseResult {{cmdVar}}001)
				{{tab}}    {
				{{tab}}        await {{cmdVar}}001.ExecuteAsync(parseResult, ct).ConfigureAwait(false);
				{{tab}}    }
				{{tab}}
				{{tab}}    if ({{cmdVar}} is IAsyncCommand {{cmdVar}}002)
				{{tab}}    {
				{{tab}}        await {{cmdVar}}002.ExecuteAsync(ct).ConfigureAwait(false);
				{{tab}}    }
				{{tab}}
				{{tab}}    if ({{cmdVar}} is ICommand {{cmdVar}}003)
				{{tab}}    {
				{{tab}}        {{cmdVar}}003.Execute();
				{{tab}}    }
				{{tab}}});

				""");
		}

		var children = cmds.Where(c => c.CmdParent?.EqualsNamedSymbol(cmd.Symbol) ?? false).ToList();
		if (children.Count > 0)
		{
			sb.AppendLine($"{tab}{{");

			foreach (var cCmd in children)
			{
				WriteCommand(sb, cmds, cCmd, cmd, indent + 4);
			}

			sb.AppendLine($"{tab}}}");
		}
	}

	private static string Indent(int indent) => new(' ', indent);
}